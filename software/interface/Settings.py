# -*- coding: utf-8 -*-

import datetime
import TextFile
import Constants    as const

# Type of parameters definition
LIST_INT32_PARAM  = ['sampleRate', 'channelsPerBoard', 'nBoards', 'bitsPerSample', 'swipe', 'hTick', 'baudrate', 'pktSize', 'pktComp', 'funcGenFreq', 'stressTime']
LIST_FLOAT_PARAM  = ['vMin', 'vMax', 'vTick']
LIST_STRING_PARAM = ['emulationData', 'emulationFlag', 'device', 'routine', 'hand']

class Settings():
    
    def __init__(self):
        # global objects
        self.settings = {}
            
    def applyTypes(self):
        # Convert all int parameters from string to int.
        for num_param in range( len(LIST_INT32_PARAM) ):       self.settings[ LIST_INT32_PARAM[num_param] ] = int  ( self.settings[ LIST_INT32_PARAM[num_param] ] )     
        # Convert all float parameters from string to float.
        for num_param in range( len(LIST_FLOAT_PARAM) ):       self.settings[ LIST_FLOAT_PARAM[num_param] ] = float( self.settings[ LIST_FLOAT_PARAM[num_param] ] )     
        # There is no need to convert string parameters from string to string.
    
    def load(self, path, file_name):
        # Instatiates a TextFile object to manipulate a text file.
        txt_file = TextFile.TextFile()
        # Opens the settings text file
        txt_file.loadFile( path + file_name )   
        # Gets the loaded metadata as a dictionary
        self.settings = txt_file.metadata_dict.copy()
        # Apply type convertions to the parameters
        self.applyTypes()
        # Success flag
        return True

    # Method: Save the program settings. That method shold be called only when the method load() was already called or when all settings parameters were previously 
    #         defined in the settings dictionary variable. The output file name and path are defined as constants in the begining of the file.
    # Input : None
    # Output: None
    def save(self, path, file_name):        
        # Instatiates a TextFile object to manipulate a text file.
        txt_file = TextFile.TextFile()     
        
        # Writes the header of the text file
        txt_file.writeHeaderLine('File generated by myo_cap software')
        txt_file.writeHeaderLine('Available from github.com/ddantas/leap_cap')
        txt_file.writeHeaderLine( 'Timestamp: ' + datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S') )
        txt_file.writeHeaderLine('')
        
        # Writes EMG capture settings header
        txt_file.writeHeaderLine('EMG capture settings')
        txt_file.writeHeaderLine('')
        # Writes EMG capture settings metadata
        txt_file.writeMetadataLine('sampleRate', self.settings['sampleRate'] )
        txt_file.writeMetadataLine('channelsPerBoard', self.settings['channelsPerBoard'] )
        txt_file.writeMetadataLine('nBoards', self.settings['nBoards'] )
        txt_file.writeMetadataLine('bitsPerSample', self.settings['bitsPerSample'] )
        txt_file.writeMetadataLine('swipe', self.settings['swipe'] )
        txt_file.writeMetadataLine('vTick', self.settings['vTick'] )
        txt_file.writeMetadataLine('hTick', self.settings['hTick'] )
        txt_file.writeMetadataLine('vMin', self.settings['vMin'] )
        txt_file.writeMetadataLine('vMax', self.settings['vMax'] )
        txt_file.writeHeaderLine('')                
                
        # Writes EMG communication settings header
        txt_file.writeHeaderLine('EMG communication settings')
        txt_file.writeHeaderLine('')
        # Writes EMG communication settings metadata
        txt_file.writeMetadataLine('baudrate', self.settings['baudrate'] )
        txt_file.writeMetadataLine('pktSize', self.settings['pktSize'] )
        txt_file.writeMetadataLine('pktComp', self.settings['pktComp'] )
        txt_file.writeHeaderLine('')        

        # Writes EMG function generator settings header
        txt_file.writeHeaderLine('EMG function generator settings')
        txt_file.writeHeaderLine('')
        # Writes EMG function generator settings metadata
        txt_file.writeMetadataLine('funcGenFreq', self.settings['funcGenFreq'] )
        txt_file.writeMetadataLine('stressTime', self.settings['stressTime'] )                
        
        # Saves the text lines stored in the text_file object into the settings file. 
        txt_file.saveFile( path + file_name )
        
        # Success flag
        return True
        
    def getSettingsPath(self):
        return const.SETTINGS_PATH

    def getPktSize(self):
        return self.settings['pktSize']

    def getPktComp(self):
        return self.settings['pktComp']
    
    def getFuncGenFreq(self):
        return self.settings['funcGenFreq']

    def getStressTime(self):
        return self.settings['stressTime']

    def getSampleRate(self):
        return self.settings['sampleRate']

    def getChannelsPerBoard(self):
        return self.settings['channelsPerBoard']

    def getNBoards(self):
        return self.settings['nBoards']

    def getBitsPerSample(self):
        return self.settings['bitsPerSample']

    def getBaudrate(self):
        return self.settings['baudrate']

    def getSwipe(self):
        return self.settings['swipe']

    def getVTick(self):
        return self.settings['vTick']

    def getHTick(self):
        return self.settings['hTick']

    def getVMin(self):
        return self.settings['vMin']

    def getVMax(self):
        return self.settings['vMax']

    def getTotChannels(self):
        return self.settings['channelsPerBoard'] * self.settings['nBoards']


    def setPktSize(self, value):
        self.settings['pktSize'] = value

    def setPktComp(self, value):
        self.settings['pktComp'] = value

    def setBaudrate(self, value):
        self.settings['baudrate'] = value

    def setFuncGenFreq(self, value):
        self.settings['funcGenFreq'] = value

    def setStressTime(self, value):
        self.settings['stressTime'] = value

    def setSampleRate(self, value):
        self.settings['sampleRate'] = value

    def setChannelsPerBoard(self, value):
        self.settings['channelsPerBoard'] = value

    def setNBoards(self, value):
        self.settings['nBoards'] = value

    def setBitsPerSample(self, value):
        self.settings['bitsPerSample'] = value

    def setSwipe(self, value):
        self.settings['swipe'] = value

    def setVTick(self, value):
        self.settings['vTick'] = value

    def setHTick(self, value):
        self.settings['hTick'] = value

    def setVMin(self, value):
        self.settings['vMin'] = value

    def setVMax(self, value):
        self.settings['vMax'] = value        