# -*- coding: utf-8 -*-
"""
Created on Wed Jan  6 18:42:02 2021

@author: asaphe
"""
import datetime
import os
import sys
# obtain the myograph path
myograph_import_path = os.path.split( os.path.split( os.path.split(os.path.abspath(__file__))[0] )[0] )[0]
# adds the myograph path for future inclusions 
sys.path.append(myograph_import_path)

import TextFile2

SETTINGS_PATH  = myograph_import_path + '\\leap_cap\\src\\config\\'
FILE_NAME      = 'settings'

LIST_INT32_PARAM  = ['sampleRate', 'channelsPerBoard', 'nBoards', 'bitsPerSample', 'swipe', 'hTick', 'baudrate', 'pktSize', 'pktComp', 'funcGenFreq', 'stressTime']
LIST_FLOAT_PARAM  = ['vMin', 'vMax', 'vTick']
LIST_STRING_PARAM = ['emulationData', 'emulationFlag', 'device', 'routine', 'hand']

class LeapCapSettings():
    
    def __init__(self):
        # global objects
        self.txt_file = TextFile2.TextFile()     
        self.settings = {}
            
    def applyTypes(self):
        return 0 
    
    def load(self):
        try:
            
            self.txt_file.openFile( SETTINGS_PATH + FILE_NAME )   
            self.settings = self.txt_file.metadata_dict.copy() 
            
            self.applyTypes()
            
            print( self.txt_file.header_lines )
            #print( self.txt_file.metadata_lines )
            print('\n')
            print( self.txt_file.metadata_dict )
            print('\n')
            print( self.txt_file.data_lines )                 

        except:
            return False

    def save(self):
        try:
            settings_file = open(SETTINGS_PATH, 'w')
            settings_file.write('## File generated by myo_cap software \n' +
                        '## Available from github.com/ddantas/leap_cap \n' +
                        '## Timestamp: ' + datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S') + ' \n' +
                        '##\n'+
                        '## EMG capture settings\n' +
                        '##\n'+
                        '# sampleRate: ' + str(self.getSampleRate()) + '\n' +
                        '# channelsPerBoard: ' + str(self.getChannelsPerBoard()) + '\n' +
                        '# nBoards: ' + str(self.getNBoards()) + '\n' +
                        '# bitsPerSample: ' + str(self.getBitsPerSample()) + '\n' +
                        '# swipe: '+ str(self.getSwipe()) + '\n' +
                        '# vTick: ' + str(self.getVTick()) + '\n' +
                        '# hTick: ' + str(self.getHTick()) + '\n' +
                        '# vMin: ' + str(self.getVMin()) + '\n' +
                        '# vMax: ' + str(self.getVMax()) + '\n' +
                        '##\n' +
                        '## EMG emulation settings\n' +
                        '##\n' +
                        '# emulationFlag: ' + self.getEmulationFlag() + '\n' +
                        '# emulationData: ' + self.getEmulationData() + '\n' +
                        '##\n'+
                        '## EMG communication settings\n' +
                        '##\n'+
                        '# baudrate: ' + str(self.getBaudrate()) + '\n' +
                        '# pktSize: ' + str(self.getPktSize()) + '\n' +
                        '# pktComp: ' + str(self.getPktComp()) + '\n' +
                        '##\n'+
                        '## EMG function generator settings\n' +
                        '##\n'+
                        '# funcGenFreq: ' + str(self.getFuncGenFreq()) + '\n' +
                        '# stressTime: ' + str(self.getStressTime()) + '\n' +
                        '##\n' +
                        '## Gesture capture settings\n' 
                        '##\n' +
                        '# device: ' + self.getDeviceType() + '\n' +
                        '# routine: ' + self.getCaptureRoutine() + '\n' +
                        '# hand: ' + self.getHand()  
                        )
            settings_file.close()
            return True
        except:
            return False

## LeapCap Exclusive get and set methods ############################################

    def getSettingsPath(self):
        return SETTINGS_PATH        

    def getEmulationFlag(self):
        return self.settings['emulationFlag'] 
        
    def getEmulationData(self):
        return self.settings['emulationData'] 
        
    def getDeviceType(self):
        return self.settings['device'] 
        
    def getCaptureRoutine(self):
        return self.settings['routine'] 
        
    def getHand(self):
        return self.settings['hand'] 
    
    
    def setEmulationFlag(self,value):
        self.settings['emulationFlag'] = value
        
    def setEmulationData(self,value):
        self.settings['emulationData'] = value
        
    def setDeviceType(self,value):
        self.settings['device'] = value 
        
    def setCaptureRoutine(self,value):
        self.settings['routine'] = value 
        
    def setHand(self,value):
        self.settings['hand'] = value  

## MyoCap and LeapCap common get and set methods ####################################

    def getPktSize(self):
        return self.settings['pktSize']

    def getPktComp(self):
        return self.settings['pktComp']
    
    def getFuncGenFreq(self):
        return self.settings['funcGenFreq']

    def getStressTime(self):
        return self.settings['stressTime']

    def getSampleRate(self):
        return self.settings['sampleRate']

    def getChannelsPerBoard(self):
        return self.settings['channelsPerBoard']

    def getNBoards(self):
        return self.settings['nBoards']

    def getBitsPerSample(self):
        return self.settings['bitsPerSample']

    def getBaudrate(self):
        return self.settings['baudrate']

    def getSwipe(self):
        return self.settings['swipe']

    def getVTick(self):
        return self.settings['vTick']

    def getHTick(self):
        return self.settings['hTick']

    def getVMin(self):
        return self.settings['vMin']

    def getVMax(self):
        return self.settings['vMax']

    def getTotChannels(self):
        return self.settings['channelsPerBoard'] * self.settings['nBoards']
    

    def setPktSize(self, value):
        self.settings['pktSize'] = value

    def setPktComp(self, value):
        self.settings['pktComp'] = value

    def setBaudrate(self, value):
        self.settings['baudrate'] = value

    def setFuncGenFreq(self, value):
        self.settings['funcGenFreq'] = value

    def setStressTime(self, value):
        self.settings['stressTime'] = value

    def setSampleRate(self, value):
        self.settings['sampleRate'] = value

    def setChannelsPerBoard(self, value):
        self.settings['channelsPerBoard'] = value

    def setNBoards(self, value):
        self.settings['nBoards'] = value

    def setBitsPerSample(self, value):
        self.settings['bitsPerSample'] = value

    def setSwipe(self, value):
        self.settings['swipe'] = value

    def setVTick(self, value):
        self.settings['vTick'] = value

    def setHTick(self, value):
        self.settings['hTick'] = value

    def setVMin(self, value):
        self.settings['vMin'] = value

    def setVMax(self, value):
        self.settings['vMax'] = value