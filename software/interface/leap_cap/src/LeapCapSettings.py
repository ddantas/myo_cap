# -*- coding: utf-8 -*-
"""
Created on Wed Jan  6 18:42:02 2021

@author: asaphe
"""
import datetime
import os
import sys
# obtain the myograph path
myograph_import_path = os.path.split( os.path.split( os.path.split(os.path.abspath(__file__))[0] )[0] )[0]
# adds the myograph path for future inclusions 
sys.path.append(myograph_import_path)

import TextFile2

SETTINGS_PATH  = myograph_import_path + '\\leap_cap\\src\\config\\'
FILE_NAME      = 'settings'

# Type of parameters definition
LIST_INT32_PARAM  = ['sampleRate', 'channelsPerBoard', 'nBoards', 'bitsPerSample', 'swipe', 'hTick', 'baudrate', 'pktSize', 'pktComp', 'funcGenFreq', 'stressTime']
LIST_FLOAT_PARAM  = ['vMin', 'vMax', 'vTick']
LIST_STRING_PARAM = ['emulationData', 'emulationFlag', 'device', 'routine', 'hand']

class LeapCapSettings():
    
    def __init__(self):
        # global objects
        self.txt_file = TextFile2.TextFile()     
        self.settings = {}
            
    def applyTypes(self):
        # Convert all int parameters from string to int.
        for num_param in range( len(LIST_INT32_PARAM) ):       self.settings[ LIST_INT32_PARAM[num_param] ] = int  ( self.settings[ LIST_INT32_PARAM[num_param] ] )     
        # Convert all float parameters from string to float.
        for num_param in range( len(LIST_FLOAT_PARAM) ):       self.settings[ LIST_FLOAT_PARAM[num_param] ] = float( self.settings[ LIST_FLOAT_PARAM[num_param] ] )     
        # There is no need to converto string parameters from string to string.
    
    def load(self):
        # Opens the settings text file
        self.txt_file.openFile( SETTINGS_PATH + FILE_NAME )   
        # Gets the loaded metadata as a dictionary
        self.settings = self.txt_file.metadata_dict.copy()
        # Apply type convertions to the parameters
        self.applyTypes()

    def save(self):        
        # Clear the previus data in txt_file
        self.txt_file.__init__()
        
        # Writes the header
        self.txt_file.writeHeaderLine('File generated by myo_cap software')
        self.txt_file.writeHeaderLine('Available from github.com/ddantas/leap_cap')
        self.txt_file.writeHeaderLine( 'Timestamp: ' + datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S') )
        self.txt_file.writeHeaderLine('')
        
        # Writes EMG capture settings header
        self.txt_file.writeHeaderLine('EMG capture settings')
        self.txt_file.writeHeaderLine('')
        # Writes EMG capture settings metadata
        self.txt_file.writeMetadataLine('sampleRate', self.settings['sampleRate'] )
        self.txt_file.writeMetadataLine('channelsPerBoard', self.settings['channelsPerBoard'] )
        self.txt_file.writeMetadataLine('nBoards', self.settings['nBoards'] )
        self.txt_file.writeMetadataLine('bitsPerSample', self.settings['bitsPerSample'] )
        self.txt_file.writeMetadataLine('swipe', self.settings['swipe'] )
        self.txt_file.writeMetadataLine('vTick', self.settings['vTick'] )
        self.txt_file.writeMetadataLine('hTick', self.settings['hTick'] )
        self.txt_file.writeMetadataLine('vMin', self.settings['vMin'] )
        self.txt_file.writeMetadataLine('vMax', self.settings['vMax'] )
        self.txt_file.writeHeaderLine('')        
        
        

## LeapCap Exclusive get and set methods ############################################

    def getSettingsPath(self):
        return SETTINGS_PATH        

    def getEmulationFlag(self):
        return self.settings['emulationFlag'] 
        
    def getEmulationData(self):
        return self.settings['emulationData'] 
        
    def getDeviceType(self):
        return self.settings['device'] 
        
    def getCaptureRoutine(self):
        return self.settings['routine'] 
        
    def getHand(self):
        return self.settings['hand'] 
    
    
    def setEmulationFlag(self,value):
        self.settings['emulationFlag'] = value
        
    def setEmulationData(self,value):
        self.settings['emulationData'] = value
        
    def setDeviceType(self,value):
        self.settings['device'] = value 
        
    def setCaptureRoutine(self,value):
        self.settings['routine'] = value 
        
    def setHand(self,value):
        self.settings['hand'] = value  

## MyoCap and LeapCap common get and set methods ####################################

    def getPktSize(self):
        return self.settings['pktSize']

    def getPktComp(self):
        return self.settings['pktComp']
    
    def getFuncGenFreq(self):
        return self.settings['funcGenFreq']

    def getStressTime(self):
        return self.settings['stressTime']

    def getSampleRate(self):
        return self.settings['sampleRate']

    def getChannelsPerBoard(self):
        return self.settings['channelsPerBoard']

    def getNBoards(self):
        return self.settings['nBoards']

    def getBitsPerSample(self):
        return self.settings['bitsPerSample']

    def getBaudrate(self):
        return self.settings['baudrate']

    def getSwipe(self):
        return self.settings['swipe']

    def getVTick(self):
        return self.settings['vTick']

    def getHTick(self):
        return self.settings['hTick']

    def getVMin(self):
        return self.settings['vMin']

    def getVMax(self):
        return self.settings['vMax']

    def getTotChannels(self):
        return self.settings['channelsPerBoard'] * self.settings['nBoards']
    

    def setPktSize(self, value):
        self.settings['pktSize'] = value

    def setPktComp(self, value):
        self.settings['pktComp'] = value

    def setBaudrate(self, value):
        self.settings['baudrate'] = value

    def setFuncGenFreq(self, value):
        self.settings['funcGenFreq'] = value

    def setStressTime(self, value):
        self.settings['stressTime'] = value

    def setSampleRate(self, value):
        self.settings['sampleRate'] = value

    def setChannelsPerBoard(self, value):
        self.settings['channelsPerBoard'] = value

    def setNBoards(self, value):
        self.settings['nBoards'] = value

    def setBitsPerSample(self, value):
        self.settings['bitsPerSample'] = value

    def setSwipe(self, value):
        self.settings['swipe'] = value

    def setVTick(self, value):
        self.settings['vTick'] = value

    def setHTick(self, value):
        self.settings['hTick'] = value

    def setVMin(self, value):
        self.settings['vMin'] = value

    def setVMax(self, value):
        self.settings['vMax'] = value