--- include/Leap.i.orig	2015-08-21 04:04:39.000000000 +0000
+++ include/Leap.i	2016-05-04 17:31:08.226366998 +0000
@@ -539,7 +539,7 @@
   if _newclass:data = _swig_property(data)
   __swig_getmethods__["distortion"] = distortion
   if _newclass:distortion = _swig_property(distortion)
-%}}
+}}
 
 %extend Leap::Mask {
 %pythoncode {
@@ -549,7 +549,7 @@
       return ptr
   __swig_getmethods__["data"] = data
   if _newclass:data = _swig_property(data)
-%}}
+}}
 
 %extend Leap::Frame {
 %pythoncode {
@@ -562,7 +562,7 @@
       LeapPython.Frame_deserialize(self, tup[0], tup[1])
   __swig_getmethods__["serialize"] = serialize
   if _newclass:serialize = _swig_property(serialize)
-%}}
+}}
 
 %constattrib( Leap::Image, void*, dataPointer );
 %constattrib( Leap::Image, void*, distortionPointer );
@@ -988,7 +988,7 @@
 %pythoncode {
   def to_float_array(self): return [self.x, self.y, self.z]
   def to_tuple(self): return (self.x, self.y, self.z)
-%}}
+}}
 %extend Leap::Matrix {
 %pythoncode {
   def to_array_3x3(self, output = None):
@@ -1006,7 +1006,7 @@
       output[8],  output[9],  output[10], output[11] = self.z_basis.x, self.z_basis.y, self.z_basis.z, 0.0
       output[12], output[13], output[14], output[15] = self.origin.x,  self.origin.y,  self.origin.z,  1.0
       return output
-%}}
+}}
 
 #endif
 
@@ -1094,7 +1094,7 @@
     while _pos < len(self):
       yield self[_pos]
       _pos += 1
-%}}
+}}
 %enddef
 
 #else
@@ -1153,7 +1153,7 @@
     elif type == LeapPython.Config_TYPE_STRING:
       return LeapPython.Config_set_string(self, *args)
     return False
-%}}
+}}
 // Ignore methods that are unnecessary due to get and set functions defined above
 %feature("shadow") Leap::Config::type(const std::string& key) const %{%}
 %feature("shadow") Leap::Config::getBool(const std::string& key) const %{%}
